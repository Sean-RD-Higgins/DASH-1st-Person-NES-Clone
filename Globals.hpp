#ifndef H_GLOBALS
#define H_GLOBALS

#include <iostream>
#include <osg/Group>
#include <osg/LightSource>
#include <osg/Node>
#include <osg/Switch>
#include <osg/Material>
#include <osg/ShapeDrawable>
#include <osg/Shader>
#include <osg/PositionAttitudeTransform>
#include <osg/Texture2D>
#include <osgDB/ReadFile>
#include <osgDB/WriteFile>
#include <osgGA/StateSetManipulator>
#include <osgGA/TrackballManipulator>
#include <osgGA/NodeTrackerManipulator>
#include <osgSim/DOFTransform>
#include <osgSim/MultiSwitch>
#include <osgViewer/Viewer>
#include <osgViewer/ViewerEventHandlers>
#include <osgParticle/FireEffect>
#include <osgParticle/SmokeEffect>

// Transform all types, methods, and globals to external variables to be seen by all who care enough
class Player;
class Foe;
extern Player * plyr;
extern Foe * foe[];
extern const int MAX_FOES;
extern osgGA::GUIEventAdapter * gui;
extern std::string mapString;
extern std::string getMapString();
extern double getDistance( osg::Vec3d A, osg::Vec3d B );
extern bool isRadiusFree( osg::Vec3 pos, float radius );
extern int playerTakeDamageMaybe();
extern int foeTakeDamageMaybe( int foeId );
extern bool isPlaceFree( osg::Vec3d pos );
extern const int MAP_GROUND = 0;
extern const int MAP_GRASS = 1;
extern const int MAP_WATER = 2;
extern const int MAP_MOUNTAIN = 3;
extern const int MAP_BARK = 4;
extern const int MAP_MUD = 5;
extern int mouseButton[];
extern osg::ref_ptr<osg::Group> landNode;
extern std::string texName[];
extern osg::Texture2D * texture[];
extern osg::Node * mapNode[];

#include "KeyboardEventHandler.hpp"
#include "LandGenerator.hpp"
#include "MotionCallbacks.hpp"
#include "Player.hpp"
#include "Enemy.hpp"

using namespace std;

// Prototypes
string getMapString();

// cuz stuff breaks sometimes and i like to test them
double debugX = 0.0;
double debugY = 0.0;
double debugZ = 0.0;

// Global Variables (Should not be many)

// Init all textures
std::string texName[] = { "Texture/tileGround.png", "Texture/tileGrass.png", "Texture/tileWater.png", "Texture/tileMountain.png", "Texture/tileBark.jpg", "Texture/tileMud.png" };
osg::Texture2D * texture[6];
osg::Node * mapNode[6];

// This group contains each "block" of land.
osg::ref_ptr<osg::Group> landNode;

// The total amount of foes on the field at once
const int MAX_FOES = 1;

// Our important players and foes
Player * plyr = new Player();
Foe * foe[MAX_FOES];

// The gui handler
osgGA::GUIEventAdapter * gui;

// The map string 100x100
string mapString = getMapString(); 

// Return a string
string getMapString( ) {
	string mapStr =         "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" ;
	mapStr = mapStr.append( "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" );
	mapStr = mapStr.append( "2200000222220000033000000003333333333333333300000000222222222222222222222333333333333333333333333322" );
	mapStr = mapStr.append( "2200000022220000000000000003333333333333000000000000000000222222222222222333333333335555555333333322" );
	mapStr = mapStr.append( "2200000022222000033000033000333333333330000000000000000000002222222222222333333333555555555553333322" );
	mapStr = mapStr.append( "2200000002222222000003333000333333333330000003333000000033300022222222222333333355555555555555333322" );
	mapStr = mapStr.append( "2222000000002222000000000000003333300000000003333003000000000002222222222333335555555555555555533322" );
	mapStr = mapStr.append( "2222200000000002220000003300000000000000000000333000000000300000222222222333555555555555555555555322" );
	mapStr = mapStr.append( "2222222000000000022000000000000000003330000000033300000300000322222222222333555555555555555555555322" );
	mapStr = mapStr.append( "2222222000000000300000000000000033330000000000003330000000000000222222222333355555555555555555555322" );
	mapStr = mapStr.append( "2222220000000000003330000003033333000000330000000033000000033300222222222333335555555555555555555322" );
	mapStr = mapStr.append( "2222000000000000000000000000003333000000000000000033300030000003000222222333333355555555555555555322" );
	mapStr = mapStr.append( "2222000000333000000000000000000000000000033000033333330000000000003022222333333333333335555555555322" );
	mapStr = mapStr.append( "2200000000000033333330000000033330000000000000333000033000000000030022222333555533333333335555553322" );
	mapStr = mapStr.append( "2233333330000000000333000000000000000000000000000000033300030000000022222333555555555553355555333322" );
	mapStr = mapStr.append( "2200000000000000033333330000003300000000000003000003333000000000030022222333555555555555555553355322" );
	mapStr = mapStr.append( "2200000333330000000000000000300000333333330000000000330000300000030022222333555553333335555353555322" );
	mapStr = mapStr.append( "2233303330000003000000000000000000000000000000000003300033300000000022222333555555533333333535555322" );
	mapStr = mapStr.append( "2200000000000000000000030000333000000000333000000000330000000000000022222333555555555333333555555322" );
	mapStr = mapStr.append( "2200000000000000000330000000000000000003333333000000333000000000000022222333555555555555555555555322" );
	mapStr = mapStr.append( "2203330000000003000000333000000000000000000000000000033000030000030022222333555555555555555555555322" );
	mapStr = mapStr.append( "2200030000003330030000303300000000330000000000033300033000003000030022222333333555533355555555555322" );
	mapStr = mapStr.append( "2200030000000000030000033300000000000000000000000000033330000000000002222333333333333335555555555322" );
	mapStr = mapStr.append( "2200000000000000000000003303000000000000300000000003333333300000000002222333333333555333555555555322" );
	mapStr = mapStr.append( "2200003333000000003300000000000000000003330000033333333333333000000022222333335555555553333555555322" );
	mapStr = mapStr.append( "2200030000000000000000000000000000000000000003330003333333300000000022222333555555555555333355555322" );
	mapStr = mapStr.append( "2200333000000000000000000000033000000000000000000000333333000000000222222333355555333555555555555322" );
	mapStr = mapStr.append( "2200030000000000000000000000033000000000000000000000003300000000000222222553335555555333555555555322" );
	mapStr = mapStr.append( "2200000000000000333000000000000000000003330000000000033000000000000222222555333555555533355555555322" );
	mapStr = mapStr.append( "2200000330000000033000000000000000000000333000000000033000000000000222222555533355555553333355555322" );
	mapStr = mapStr.append( "2200000330000000000000000000000000000000000000000000330000000000000222222555553335555555553333533322" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000000000000000003330000033300000022222555555333555555555533333322" );
	mapStr = mapStr.append( "2200000000000000000000003300000000000000000000033333330000000330000002222555555533333555555555555322" );
	mapStr = mapStr.append( "2200000000000333330000003300000000000033000000333333330000000000000002222555555553333355555555555322" );
	mapStr = mapStr.append( "2200000000033333333333000000000000000333300000333333333300000000000000222555555555333333355555555322" );
	mapStr = mapStr.append( "2200000333333333333333333333000000000003000000333333333333000000000000022555555555555533335555555322" );
	mapStr = mapStr.append( "2233333333333333333333333333333333000000000000333333333333333000000000022555555555555553333333555322" );
	mapStr = mapStr.append( "2233333333333333333333333333333333300333333000333333333333333333330000022555555555555555533335555522" );
	mapStr = mapStr.append( "2233333333333333333333333333333333300333333000333333300000003333330000022555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000330033000000033300000003333330000022555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000330033000000033300333333333330000222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333333330033333333333300333333333000002222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333333330033333333333300333333333000022222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000000000000000000000000000000000000000222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000000000000000000000000000000000000000222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333333333333333333333333333333333333333333333333333330222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333330000000000000000333332222222222222222222222222222222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333330000000000000000333330000000000000000000000002222222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333330003333333333300333330003333333330000000000022222222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333330003333333000300300000000000033330000000002222222222225555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333330003333333000333300000000000033330000002222222222222555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000333300333333330033330000000222222222225555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000333300333333330033330000000222222222222255555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300333333333333333333333300333003330033330000000222222222222555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000000000333003330033330000000000222222222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333300000000000000000000000000333003330033330000000000222222222255555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333333333003330033330000000000222222222222555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000000003330033330000000000222222222225555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000000003330033330000000002222222555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333333333003330033330000000002222222222555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000333003330033330000000022222222222555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000333003330033330000000222222222255555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333300333333330033330000000222222225555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333333333333333333333333300333333330033330000002222222255555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333330000000000000000033333300000000033330000002222222225555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333330000000000000000000000000000000033330000002222222222555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000333333330000003333333330000000000333333333330000022222222055555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000333330000003333003333333333333333333333330000022222222255555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000233330000003333000000000000000000000000000000022222222222225555555555555555555555555555522" );
	mapStr = mapStr.append( "2222222222223330000003333000000000000000000000000000000022222222225555555555555555555555555555555522" );
	mapStr = mapStr.append( "2233333332223330000003333333333333333333333333333330000022222222225555555555555555555555555555555522" );
	mapStr = mapStr.append( "2233333332222330000003333333333333333333333333333330000022222222255555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000033330033333333333330000022222222222555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000000000000000000033330033333333333330000032222222225555555555555555555555555555555522" );
	mapStr = mapStr.append( "2200000000000000111000000000000033330000000000000000000033222222222222555555555555555555555555552222" );
	mapStr = mapStr.append( "2200000000001111111111100000000033330000000000000000000033332222222222222222555555555555555555552222" );
	mapStr = mapStr.append( "2200000001111111111144400000000033333333333333333333333333333322222222222222225555555555555555222222" );
	mapStr = mapStr.append( "2200000111111111114444444000000044444444444444444444444444444444222222222222225555555555555522222222" );
	mapStr = mapStr.append( "2222222244111144444444444444444444111111111111111111111111111111144411111551155554445555555555022222" );
	mapStr = mapStr.append( "2222224441111114441111111111111111141111111111111111111111111111111411111115511444111115555511000222" );
	mapStr = mapStr.append( "2222244441111111144411414111111141111111111111111114111111111111111111111111111114441111551111000222" );
	mapStr = mapStr.append( "2224444411114111111111411111111111111111111111111114444111114111111111111551451444111111111511000022" );
	mapStr = mapStr.append( "2224444441111111111111411114111114111111144111111111141111111111111111111111111111444111111111000022" );
	mapStr = mapStr.append( "2244444441111111111111111144111111111111111111111111111144411114111111144111114411111111441111000022" );
	mapStr = mapStr.append( "2244444111111111144111114141111111114111111144444111111111111444441111111111111111111111111111000022" );
	mapStr = mapStr.append( "2200001111114111111111141111111111114141111111141444111111111144411111111141111111111141111111000022" );
	mapStr = mapStr.append( "2200001111111111111111111111141144111111144411111111111111111111111111144411111111111111111111000022" );
	mapStr = mapStr.append( "2200001111111111411111111111111111111111111111444111111411111111111111111111111111111441111111000022" );
	mapStr = mapStr.append( "2200001111111111111111411111111111411111141111111111111111111111111144411111111111111111111111000022" );
	mapStr = mapStr.append( "2200001114111111111111111111111114111111111111111111111111411111111144411114111111111144441111000022" );
	mapStr = mapStr.append( "2200001114111111111411111111111111111111111111144411111111111141111111111111111111114444111111000022" );
	mapStr = mapStr.append( "2200001111111414111111111111111111111111111111111111111111111141111114111111111111441111111111000022" );
	mapStr = mapStr.append( "2200001111111111141141144111111111111111111111111111111114411114441111111111111444411411111111000022" );
	mapStr = mapStr.append( "2200001111141111141111111111111444111111114111111111111411111111111111441111111444441111111111000022" );
	mapStr = mapStr.append( "2200001111111111111111111111114111141111111111111444414111111111111111111114144411111111111111000022" );
	mapStr = mapStr.append( "2200001111411111144411111111111111111111111411111111111111111111114114444144111111141111111111000022" );
	mapStr = mapStr.append( "2200001111111111111111111111111111111111111111111114111111111111111111111111111111111111111111000022" );
	mapStr = mapStr.append( "2200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022" );
	mapStr = mapStr.append( "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" );
	mapStr = mapStr.append( "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222" );
	return mapStr;
}

// Return if the location on the mapstring is allowed to be stepped on
bool isPlaceFree( osg::Vec3d pos ) {

	// Out of bounds is NOT considered free
	if(pos.x() < 0 || pos.x() > 100 || pos.y() > 0 || pos.y() < -100) {
		return false;
	}

	// Pull the average location of the desired place.  There is no round function so we floor +0.5 to get desired result
	int x = floor( pos.x() + 0.5 );
	int y = floor( - pos.y() + 0.5 );

	// Take the current place of the land string and get the char from it.
	char landChar = mapString[ y*100 + x];

	// Convert the text respresent as a char into an int including the offset
	int landInt = landChar - 48;

	// Put it within boundaries no matter what
	landInt = landInt % 6;
	
	// WHY DUPLICATE VARIABLES!?!?!?  So the next line can be read much easier  if L (the land int) is a steppable place, return true
	int L = landInt;
	return (L == MAP_GRASS || L == MAP_GROUND || L == MAP_MUD);
}

// Lazy computation, and mathematically incorrect XD!!!!  But it sorta gets the job done...
bool isRadiusFree( osg::Vec3 pos, float radius ) {
	return isPlaceFree(pos + osg::Vec3d(0,0,0)) && 
		   isPlaceFree(pos + osg::Vec3d(-radius,-radius,0)) &&
		   isPlaceFree(pos + osg::Vec3d(radius,-radius,0)) &&
		   isPlaceFree(pos + osg::Vec3d(-radius,radius,0)) &&
		   isPlaceFree(pos + osg::Vec3d(radius,radius,0))
		   ;
}

// Find the exact distance between two points
double getDistance( osg::Vec3d A , osg::Vec3d B ) {

	// Get the difference in X
	float difX = abs( A.x() - B.x() );

	// Get the difference in Y
	float difY = abs( A.y() - B.y() );

	// Pathag theorum
	return sqrt( difX * difX + difY * difY );
}

// Check if player and foes are colliding
int playerTakeDamageMaybe( ) {

	// player's position
	osg::Vec3d playerPos = plyr->alterNode.get()->getPosition();

	// Now to check for damage from each individual foe
	for( int i = 0; i < MAX_FOES; i++ ) {

		// foe's position
		osg::Vec3d foePos = foe[i]->alterNode.get()->getPosition();

		// is it in radius?
		if( getDistance(playerPos, foePos) < plyr->radius + foe[i]->radius ) {

			// blargh, we're hit
			return foe[i]->attack;
		}
	}

	// No damage done
	return 0;

} // playerTakeDamageMaybe()

// Check if player's sword and foes are colliding
int foeTakeDamageMaybe( int foeId ) {

	// If the player isnt attacking in the first place, why bother doing all the math?
	if( plyr->isAttacking == false ) { 
		return 0;
	}

	// player's position
	osg::Vec3d playerPos = plyr->alterNode.get()->getPosition();

	// foe's position
	osg::Vec3d foePos = foe[foeId]->alterNode.get()->getPosition();

	// is it in radius?
	if( getDistance( playerPos, foePos ) < plyr->radius + plyr->attackRadius + foe[foeId]->radius ) {

		// the enemy is hit
		return (int)(plyr->attack);
	}

	// No damage done
	return 0;

} // foeTakeDamageMaybe()

#endif //H_GLOBALS
